;(function() {

  var BLOCK_SIZE = 10;

  var Game = function() {
    var screen = document.getElementById("screen").getContext('2d');
    var scheme = "ws://";
    var uri = scheme + window.document.location.host + "/";

    this.size = { width: screen.canvas.width, height: screen.canvas.height };
    this.socket = new WebSocket(uri);
    this.dataReceived = null;
    this.boardDimensionsSet = false;
    this.message = 'Waiting for players...';

    var keyhandler = new Keyboarder(this.socket, this.roomName);

    var self = this;
    this.socket.onopen = function() {
        var roomName = (window.location.href).split('#')[1];
        objectToSend = {room: roomName};
        this.isopen = true;

        this.sendMessage(objectToSend, "json");
        console.log(objectToSend);

        console.log("Connected!");
    }

    this.socket.onmessage = function(e) {
      if (typeof e.data == "string") {
          self.message = '';
          self.dataReceived = JSON.parse(e.data);
          if (!this.boardDimensionsSet) {
            self.size.width = self.dataReceived.board.size.width;
            self.size.height = self.dataReceived.board.size.height;
            screen.canvas.width = self.dataReceived.board.size.width;
            screen.canvas.height = self.dataReceived.board.size.height;
            self.boardDimensionsSet = true;
          }
          if (self.dataReceived.game_over) {
            self.message = 'Game Over';
          }
          self.draw(screen);
          console.log(self.dataReceived);
      }
    }.bind(screen)

    this.socket.onclose = function(e) {
        console.log("Connection closed.");
        this.socket = null;
        this.isopen = false;
    }

    this.socket.sendMessage = function(data, type) {
      if (this.isopen) {
          switch(type) {
              case 'json':
                  this.send(JSON.stringify(data));
                  break;
              case 'string':
                  this.send(data);
                  break;
          }
      } else {
          console.log("Connection not opened.")
      }
    }

    this.draw(screen);
  };

  Game.prototype = {
    draw: function(screen) {
      data = this.dataReceived;
      screen.clearRect(0, 0, this.size.width, this.size.height);

      if (this.message) {
        //If there is any message it will show it
        screen.font = "20px serif";
        var messageWidth = screen.measureText(this.message).width;
        screen.fillText(this.message, this.size.width / 2 - messageWidth / 2, 50);

        if (!!data) {
          screen.font = "40px serif";
          var gameOverScore = "SCORE: " + data.score,
              gameOverScoreWidth = screen.measureText(gameOverScore).width;
          screen.fillText(gameOverScore, this.size.width / 2 - gameOverScoreWidth / 2, 120);
        }


      } else {
        // Draw score
        var scoreMessage = data.score;
        screen.fillStyle = "#000000";
        screen.font = "10px serif";
        screen.fillText("SCORE: " + scoreMessage, 10, 20);

        // Draw the bodies
        data.snakes.map(function(snake){
          drawRect(screen, snake.headblock, snake.headblock.color);
        }.bind(screen));
      }
    }
  };

  var Keyboarder = function(socket, room) {
    var keyState = {},
        roomName = room;

    window.addEventListener('keydown', function(e) {
      var objectToSend = {keycode: e.keyCode};
      keyState[e.keyCode] = true;
      socket.sendMessage(objectToSend, "json");
    });

    window.addEventListener('keyup', function(e) {
      keyState[e.keyCode] = false;
    });

    this.isDown = function(keyCode) {
      return keyState[keyCode] === true;
    };

    this.KEYS = { LEFT: 37, RIGHT: 39, UP: 38, DOWN: 40 };
  };


  var drawRect = function(screen, body, color) {
    screen.fillStyle = color;
    screen.fillRect(body.center.x - body.size.x / 2, body.center.y - body.size.y / 2,
                    body.size.x, body.size.y);
  };

  window.addEventListener('load', function() {
    new Game();
  });
})(this);
